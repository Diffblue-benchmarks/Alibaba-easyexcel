package com.alibaba.excel.analysis.v03.handlers;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import com.alibaba.excel.analysis.v03.XlsRecordHandler;
import com.alibaba.excel.context.AnalysisContext;

import java.util.ArrayList;

import org.apache.poi.hssf.record.Record;
import org.junit.Test;

/**
 * Unit tests for com.alibaba.excel.analysis.v03.handlers.BofRecordHandler
 *
 * @author Diffblue JCover
 */

public class BofRecordHandlerTest {

    @Test(timeout=10000)
    public void compareToReturnsMinusOne() {
        AnalysisContext context = mock(AnalysisContext.class);
        XlsRecordHandler o = mock(XlsRecordHandler.class);
        when(o.getOrder())
            .thenReturn(1);
        assertThat(new BofRecordHandler(context, new ArrayList<com.alibaba.excel.read.metadata.ReadSheet>(), true, false).compareTo(o), is(-1));
    }

    @Test(timeout=10000)
    public void getOrderReturnsZero() {
        AnalysisContext context = mock(AnalysisContext.class);
        assertThat(new BofRecordHandler(context, new ArrayList<com.alibaba.excel.read.metadata.ReadSheet>(), true, false).getOrder(), is(0));
    }

    @Test(timeout=10000)
    public void init1() {
        AnalysisContext context = mock(AnalysisContext.class);
        new BofRecordHandler(context, new ArrayList<com.alibaba.excel.read.metadata.ReadSheet>(), true, false).init();
    }

    @Test(timeout=10000)
    public void init2() {
        AnalysisContext context = mock(AnalysisContext.class);
        new BofRecordHandler(context, new ArrayList<com.alibaba.excel.read.metadata.ReadSheet>(), false, true).init();
    }

    @Test(timeout=10000)
    public void initReadAllIsFalseAndReadSheetListIsEmpty() {
        AnalysisContext context = mock(AnalysisContext.class);
        new BofRecordHandler(context, new ArrayList<com.alibaba.excel.read.metadata.ReadSheet>(), false, false).init(new ArrayList<com.alibaba.excel.read.metadata.ReadSheet>(), false);
    }

    @Test(timeout=10000)
    public void processRecord() {
        AnalysisContext context = mock(AnalysisContext.class);
        Record record = mock(Record.class);
        when(record.getSid())
            .thenReturn(0)
            .thenReturn(1);
        new BofRecordHandler(context, new ArrayList<com.alibaba.excel.read.metadata.ReadSheet>(), true, false).processRecord(record);
    }

    @Test(timeout=10000)
    public void support1() {
        AnalysisContext context = mock(AnalysisContext.class);
        Record record = mock(Record.class);
        when(record.getSid())
            .thenReturn(133);
        assertThat(new BofRecordHandler(context, new ArrayList<com.alibaba.excel.read.metadata.ReadSheet>(), false, false).support(record), is(true));
    }

    @Test(timeout=10000)
    public void support2() {
        AnalysisContext context = mock(AnalysisContext.class);
        Record record = mock(Record.class);
        when(record.getSid())
            .thenReturn(1)
            .thenReturn(2_057);
        assertThat(new BofRecordHandler(context, new ArrayList<com.alibaba.excel.read.metadata.ReadSheet>(), false, false).support(record), is(true));
    }

    @Test(timeout=10000)
    public void supportReturnsFalse() {
        AnalysisContext context = mock(AnalysisContext.class);
        Record record = mock(Record.class);
        when(record.getSid())
            .thenReturn(1)
            .thenReturn(1);
        assertThat(new BofRecordHandler(context, new ArrayList<com.alibaba.excel.read.metadata.ReadSheet>(), true, false).support(record), is(false));
    }
}
