package com.alibaba.excel.metadata;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;

import com.alibaba.excel.enums.CellDataTypeEnum;

import java.math.BigDecimal;

import org.junit.jupiter.api.Test;

/**
 * Unit tests for com.alibaba.excel.metadata.CellData
 *
 * @author Diffblue Cover
 */

class CellDataTest {

    @Test
    void factory1() {
        CellData<String> other1 = new CellData<String>();
        other1.setBooleanValue(false);
        other1.setData("something");
        other1.setDataFormat(1);
        other1.setDataFormatString("yyyy-MM-dd");
        other1.setFormula(false);
        other1.setFormulaValue("value");
        byte[] imageValue6 = new byte[] { 1 };
        other1.setImageValue(imageValue6);
        BigDecimal numberValue4 = BigDecimal.valueOf(1L);
        other1.setNumberValue(numberValue4);
        other1.setStringValue("foo");
        other1.setType(CellDataTypeEnum.STRING);
        other1.setColumnIndex(1);
        other1.setRowIndex(1);
        CellData<String> cellData = new CellData<String>(other1);
        cellData.setBooleanValue(false);
        cellData.setData("something");
        cellData.setDataFormat(1);
        cellData.setDataFormatString("yyyy-MM-dd");
        cellData.setFormula(false);
        cellData.setFormulaValue("value");
        byte[] imageValue7 = new byte[] { 1 };
        cellData.setImageValue(imageValue7);
        cellData.setNumberValue(BigDecimal.valueOf(1L));
        cellData.setStringValue("foo");
        cellData.setType(CellDataTypeEnum.STRING);
        cellData.setColumnIndex(1);
        cellData.setRowIndex(1);
        assertThat(cellData.getBooleanValue(), is(false));
        assertThat(cellData.getData(), is("something"));
        assertThat(cellData.getDataFormat(), is(1));
        assertThat(cellData.getDataFormatString(), is("yyyy-MM-dd"));
        assertThat(cellData.getFormula(), is(false));
        assertThat(cellData.getFormulaValue(), is("value"));
        assertArrayEquals(new byte[] { 1 }, cellData.getImageValue());
        assertThat(cellData.getNumberValue(), sameInstance(numberValue4));
        assertThat(cellData.getStringValue(), is("foo"));
        assertThat(cellData.getType(), is(CellDataTypeEnum.STRING));
        assertThat(cellData.getColumnIndex(), is(1));
        assertThat(cellData.getRowIndex(), is(1));
    }

    @Test
    void factory2() {
        CellData<String> cellData = new CellData<String>("something");
        cellData.setBooleanValue(false);
        cellData.setData("something");
        cellData.setDataFormat(1);
        cellData.setDataFormatString("yyyy-MM-dd");
        cellData.setFormula(false);
        cellData.setFormulaValue("value");
        byte[] imageValue = new byte[] { 1 };
        cellData.setImageValue(imageValue);
        BigDecimal numberValue = BigDecimal.valueOf(1L);
        cellData.setNumberValue(numberValue);
        cellData.setStringValue("foo");
        cellData.setType(CellDataTypeEnum.STRING);
        cellData.setColumnIndex(1);
        cellData.setRowIndex(1);
        assertThat(cellData.getBooleanValue(), is(false));
        assertThat(cellData.getData(), is("something"));
        assertThat(cellData.getDataFormat(), is(1));
        assertThat(cellData.getDataFormatString(), is("yyyy-MM-dd"));
        assertThat(cellData.getFormula(), is(false));
        assertThat(cellData.getFormulaValue(), is("value"));
        assertArrayEquals(new byte[] { 1 }, cellData.getImageValue());
        assertThat(cellData.getNumberValue(), sameInstance(numberValue));
        assertThat(cellData.getStringValue(), is("foo"));
        assertThat(cellData.getType(), is(CellDataTypeEnum.STRING));
        assertThat(cellData.getColumnIndex(), is(1));
        assertThat(cellData.getRowIndex(), is(1));
    }

    @Test
    void factory3() {
        CellData<String> cellData = new CellData<String>("something", "value");
        cellData.setBooleanValue(false);
        cellData.setData("something");
        cellData.setDataFormat(1);
        cellData.setDataFormatString("yyyy-MM-dd");
        cellData.setFormula(false);
        cellData.setFormulaValue("value");
        byte[] imageValue = new byte[] { 1 };
        cellData.setImageValue(imageValue);
        BigDecimal numberValue = BigDecimal.valueOf(1L);
        cellData.setNumberValue(numberValue);
        cellData.setStringValue("foo");
        cellData.setType(CellDataTypeEnum.STRING);
        cellData.setColumnIndex(1);
        cellData.setRowIndex(1);
        assertThat(cellData.getBooleanValue(), is(false));
        assertThat(cellData.getData(), is("something"));
        assertThat(cellData.getDataFormat(), is(1));
        assertThat(cellData.getDataFormatString(), is("yyyy-MM-dd"));
        assertThat(cellData.getFormula(), is(false));
        assertThat(cellData.getFormulaValue(), is("value"));
        assertArrayEquals(new byte[] { 1 }, cellData.getImageValue());
        assertThat(cellData.getNumberValue(), sameInstance(numberValue));
        assertThat(cellData.getStringValue(), is("foo"));
        assertThat(cellData.getType(), is(CellDataTypeEnum.STRING));
        assertThat(cellData.getColumnIndex(), is(1));
        assertThat(cellData.getRowIndex(), is(1));
    }

    @Test
    void factory4() {
        byte[] imageValue1 = new byte[] { 1 };
        CellData<String> cellData = new CellData<String>(imageValue1);
        cellData.setBooleanValue(false);
        cellData.setData("something");
        cellData.setDataFormat(1);
        cellData.setDataFormatString("yyyy-MM-dd");
        cellData.setFormula(false);
        cellData.setFormulaValue("value");
        byte[] imageValue2 = new byte[] { 1 };
        cellData.setImageValue(imageValue2);
        BigDecimal numberValue = BigDecimal.valueOf(1L);
        cellData.setNumberValue(numberValue);
        cellData.setStringValue("foo");
        cellData.setType(CellDataTypeEnum.STRING);
        cellData.setColumnIndex(1);
        cellData.setRowIndex(1);
        assertThat(cellData.getBooleanValue(), is(false));
        assertThat(cellData.getData(), is("something"));
        assertThat(cellData.getDataFormat(), is(1));
        assertThat(cellData.getDataFormatString(), is("yyyy-MM-dd"));
        assertThat(cellData.getFormula(), is(false));
        assertThat(cellData.getFormulaValue(), is("value"));
        assertArrayEquals(new byte[] { 1 }, cellData.getImageValue());
        assertThat(cellData.getNumberValue(), sameInstance(numberValue));
        assertThat(cellData.getStringValue(), is("foo"));
        assertThat(cellData.getType(), is(CellDataTypeEnum.STRING));
        assertThat(cellData.getColumnIndex(), is(1));
        assertThat(cellData.getRowIndex(), is(1));
    }

    @Test
    void factory5() {
        CellData<String> cellData =
             new CellData<String>(CellDataTypeEnum.STRING);
        cellData.setBooleanValue(true);
        cellData.setData("something");
        cellData.setDataFormat(1);
        cellData.setDataFormatString("yyyy-MM-dd");
        cellData.setFormula(false);
        cellData.setFormulaValue("value");
        byte[] imageValue = new byte[] { 1 };
        cellData.setImageValue(imageValue);
        BigDecimal numberValue = BigDecimal.valueOf(1L);
        cellData.setNumberValue(numberValue);
        cellData.setStringValue("foo");
        cellData.setType(CellDataTypeEnum.STRING);
        cellData.setColumnIndex(1);
        cellData.setRowIndex(1);
        assertThat(cellData.getBooleanValue(), is(true));
        assertThat(cellData.getData(), is("something"));
        assertThat(cellData.getDataFormat(), is(1));
        assertThat(cellData.getDataFormatString(), is("yyyy-MM-dd"));
        assertThat(cellData.getFormula(), is(false));
        assertThat(cellData.getFormulaValue(), is("value"));
        assertArrayEquals(new byte[] { 1 }, cellData.getImageValue());
        assertThat(cellData.getNumberValue(), sameInstance(numberValue));
        assertThat(cellData.getStringValue(), is("foo"));
        assertThat(cellData.getType(), is(CellDataTypeEnum.STRING));
        assertThat(cellData.getColumnIndex(), is(1));
        assertThat(cellData.getRowIndex(), is(1));
    }

    @Test
    void factory6() {
        CellData<String> cellData =
             new CellData<String>(CellDataTypeEnum.ERROR, "foo");
        cellData.setBooleanValue(false);
        cellData.setData("something");
        cellData.setDataFormat(1);
        cellData.setDataFormatString("yyyy-MM-dd");
        cellData.setFormula(false);
        cellData.setFormulaValue("value");
        byte[] imageValue = new byte[] { 1 };
        cellData.setImageValue(imageValue);
        BigDecimal numberValue = BigDecimal.valueOf(1L);
        cellData.setNumberValue(numberValue);
        cellData.setStringValue("foo");
        cellData.setType(CellDataTypeEnum.STRING);
        cellData.setColumnIndex(1);
        cellData.setRowIndex(1);
        assertThat(cellData.getBooleanValue(), is(false));
        assertThat(cellData.getData(), is("something"));
        assertThat(cellData.getDataFormat(), is(1));
        assertThat(cellData.getDataFormatString(), is("yyyy-MM-dd"));
        assertThat(cellData.getFormula(), is(false));
        assertThat(cellData.getFormulaValue(), is("value"));
        assertArrayEquals(new byte[] { 1 }, cellData.getImageValue());
        assertThat(cellData.getNumberValue(), sameInstance(numberValue));
        assertThat(cellData.getStringValue(), is("foo"));
        assertThat(cellData.getType(), is(CellDataTypeEnum.STRING));
        assertThat(cellData.getColumnIndex(), is(1));
        assertThat(cellData.getRowIndex(), is(1));
    }

    @Test
    void checkEmpty1() {
        CellData<String> cellData = new CellData<String>();
        cellData.setType(CellDataTypeEnum.STRING);
        cellData.checkEmpty();
    }

    @Test
    void checkEmpty2() {

        // arrange
        CellData<String> cellData = new CellData<String>();
        cellData.setType(CellDataTypeEnum.STRING);

        // act
        cellData.checkEmpty();

        // assert
        assertThat(cellData.getType(), is(CellDataTypeEnum.EMPTY));
    }

    @Test
    void checkEmpty3() {

        // arrange
        CellData<String> cellData = new CellData<String>();

        // act
        cellData.checkEmpty();

        // assert
        assertThat(cellData.getType(), is(CellDataTypeEnum.EMPTY));
    }

    @Test
    void checkEmpty4() {
        CellData<String> cellData = new CellData<String>();
        cellData.setType(CellDataTypeEnum.NUMBER);
        cellData.checkEmpty();
    }

    @Test
    void checkEmpty5() {
        CellData<String> cellData = new CellData<String>();
        cellData.setType(CellDataTypeEnum.BOOLEAN);
        cellData.checkEmpty();
    }

    @Test
    void newEmptyInstance() {
        CellData result = CellData.newEmptyInstance();
        assertThat(result.getBooleanValue(), is(nullValue()));
        assertThat(result.getData(), is(nullValue()));
        assertThat(result.getDataFormat(), is(nullValue()));
        assertThat(result.getDataFormatString(), is(nullValue()));
        assertThat(result.getFormula(), is(false));
        assertThat(result.getFormulaValue(), is(nullValue()));
        assertThat(result.getImageValue(), is(nullValue()));
        assertThat(result.getNumberValue(), is(nullValue()));
        assertThat(result.getStringValue(), is(nullValue()));
        assertThat(result.getType(), is(CellDataTypeEnum.EMPTY));
        assertThat(result.getColumnIndex(), is(nullValue()));
        assertThat(result.getRowIndex(), is(nullValue()));
    }

    @Test
    void newInstanceBooleanValueIsFalse() {
        CellData result = CellData.newInstance(false);
        assertThat(result.getBooleanValue(), is(false));
        assertThat(result.getData(), is(nullValue()));
        assertThat(result.getDataFormat(), is(nullValue()));
        assertThat(result.getDataFormatString(), is(nullValue()));
        assertThat(result.getFormula(), is(false));
        assertThat(result.getFormulaValue(), is(nullValue()));
        assertThat(result.getImageValue(), is(nullValue()));
        assertThat(result.getNumberValue(), is(nullValue()));
        assertThat(result.getStringValue(), is(nullValue()));
        assertThat(result.getType(), is(CellDataTypeEnum.BOOLEAN));
        assertThat(result.getColumnIndex(), is(nullValue()));
        assertThat(result.getRowIndex(), is(nullValue()));
    }

    @Test
    void newInstanceStringValueIsFoo() {
        CellData result = CellData.newInstance("foo", 0, 1);
        assertThat(result.getBooleanValue(), is(nullValue()));
        assertThat(result.getData(), is(nullValue()));
        assertThat(result.getDataFormat(), is(nullValue()));
        assertThat(result.getDataFormatString(), is(nullValue()));
        assertThat(result.getFormula(), is(false));
        assertThat(result.getFormulaValue(), is(nullValue()));
        assertThat(result.getImageValue(), is(nullValue()));
        assertThat(result.getNumberValue(), is(nullValue()));
        assertThat(result.getStringValue(), is("foo"));
        assertThat(result.getType(), is(CellDataTypeEnum.STRING));
        assertThat(result.getColumnIndex(), is(1));
        assertThat(result.getRowIndex(), is(0));
    }

    @Test
    void newInstance() {

        // arrange
        BigDecimal numberValue = BigDecimal.valueOf(1L);

        // act
        CellData result = CellData.newInstance(numberValue, 0, 1);

        // assert
        assertThat(result.getBooleanValue(), is(nullValue()));
        assertThat(result.getData(), is(nullValue()));
        assertThat(result.getDataFormat(), is(nullValue()));
        assertThat(result.getDataFormatString(), is(nullValue()));
        assertThat(result.getFormula(), is(false));
        assertThat(result.getFormulaValue(), is(nullValue()));
        assertThat(result.getImageValue(), is(nullValue()));
        assertThat(result.getNumberValue(), sameInstance(numberValue));
        assertThat(result.getStringValue(), is(nullValue()));
        assertThat(result.getType(), is(CellDataTypeEnum.NUMBER));
        assertThat(result.getColumnIndex(), is(1));
        assertThat(result.getRowIndex(), is(0));
    }
}
