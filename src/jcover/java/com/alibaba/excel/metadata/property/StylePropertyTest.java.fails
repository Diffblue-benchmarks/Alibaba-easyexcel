package com.alibaba.excel.metadata.property;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import com.alibaba.excel.annotation.write.style.ContentStyle;
import com.alibaba.excel.annotation.write.style.HeadStyle;
import com.alibaba.excel.write.metadata.style.WriteFont;

import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.VerticalAlignment;
import org.junit.jupiter.api.Test;

/**
 * Unit tests for com.alibaba.excel.metadata.property.StyleProperty
 *
 * @author Diffblue Cover
 */

class StylePropertyTest {

    @Test
    void factory() {
        StyleProperty styleProperty = new StyleProperty();
        styleProperty.setBorderBottom(BorderStyle.NONE);
        styleProperty.setBorderLeft(BorderStyle.NONE);
        styleProperty.setBorderRight(BorderStyle.NONE);
        styleProperty.setBorderTop(BorderStyle.NONE);
        styleProperty.setBottomBorderColor((short) 1);
        styleProperty.setDataFormat((short) 1);
        styleProperty.setFillBackgroundColor((short) 1);
        styleProperty.setFillForegroundColor((short) 1);
        styleProperty.setFillPatternType(FillPatternType.NO_FILL);
        styleProperty.setHidden(false);
        styleProperty.setHorizontalAlignment(HorizontalAlignment.GENERAL);
        styleProperty.setIndent((short) 1);
        styleProperty.setLeftBorderColor((short) 1);
        styleProperty.setLocked(false);
        styleProperty.setQuotePrefix(false);
        styleProperty.setRightBorderColor((short) 1);
        styleProperty.setRotation((short) 1);
        styleProperty.setShrinkToFit(false);
        styleProperty.setTopBorderColor((short) 1);
        styleProperty.setVerticalAlignment(VerticalAlignment.TOP);
        styleProperty.setWrapped(false);
        WriteFont writeFont = new WriteFont();
        writeFont.setBold(false);
        writeFont.setCharset(1);
        writeFont.setColor((short) 1);
        writeFont.setFontHeightInPoints((short) 1);
        writeFont.setFontName("Acme");
        writeFont.setItalic(false);
        writeFont.setStrikeout(false);
        writeFont.setTypeOffset((short) 1);
        writeFont.setUnderline((byte) 1);
        styleProperty.setWriteFont(writeFont);
        assertThat(styleProperty.getBorderBottom(), is(BorderStyle.NONE));
        assertThat(styleProperty.getBorderLeft(), is(BorderStyle.NONE));
        assertThat(styleProperty.getBorderRight(), is(BorderStyle.NONE));
        assertThat(styleProperty.getBorderTop(), is(BorderStyle.NONE));
        assertThat(styleProperty.getBottomBorderColor(), is((short) 1));
        assertThat(styleProperty.getDataFormat(), is((short) 1));
        assertThat(styleProperty.getFillBackgroundColor(), is((short) 1));
        assertThat(styleProperty.getFillForegroundColor(), is((short) 1));
        assertThat(styleProperty.getFillPatternType(), is(FillPatternType.NO_FILL));
        assertThat(styleProperty.getHidden(), is(false));
        assertThat(styleProperty.getHorizontalAlignment(), is(HorizontalAlignment.GENERAL));
        assertThat(styleProperty.getIndent(), is((short) 1));
        assertThat(styleProperty.getLeftBorderColor(), is((short) 1));
        assertThat(styleProperty.getLocked(), is(false));
        assertThat(styleProperty.getQuotePrefix(), is(false));
        assertThat(styleProperty.getRightBorderColor(), is((short) 1));
        assertThat(styleProperty.getRotation(), is((short) 1));
        assertThat(styleProperty.getShrinkToFit(), is(false));
        assertThat(styleProperty.getTopBorderColor(), is((short) 1));
        assertThat(styleProperty.getVerticalAlignment(), is(VerticalAlignment.TOP));
        assertThat(styleProperty.getWrapped(), is(false));
        assertThat(styleProperty.getWriteFont(), sameInstance(writeFont));
    }

    @Test
    void build2() {
        HeadStyle headStyle = mock(HeadStyle.class);
        when(headStyle.borderBottom())
            .thenReturn(BorderStyle.NONE);
        when(headStyle.borderLeft())
            .thenReturn(BorderStyle.NONE);
        when(headStyle.borderRight())
            .thenReturn(BorderStyle.NONE);
        when(headStyle.borderTop())
            .thenReturn(BorderStyle.NONE);
        when(headStyle.bottomBorderColor())
            .thenReturn(1);
        when(headStyle.dataFormat())
            .thenReturn(1);
        when(headStyle.fillBackgroundColor())
            .thenReturn(1);
        when(headStyle.fillForegroundColor())
            .thenReturn(1);
        when(headStyle.fillPatternType())
            .thenReturn(FillPatternType.NO_FILL);
        when(headStyle.hidden())
            .thenReturn(false);
        when(headStyle.horizontalAlignment())
            .thenReturn(HorizontalAlignment.GENERAL);
        when(headStyle.indent())
            .thenReturn(1);
        when(headStyle.leftBorderColor())
            .thenReturn(1);
        when(headStyle.locked())
            .thenReturn(false);
        when(headStyle.quotePrefix())
            .thenReturn(false);
        when(headStyle.rightBorderColor())
            .thenReturn(1);
        when(headStyle.rotation())
            .thenReturn(1);
        when(headStyle.shrinkToFit())
            .thenReturn(true);
        when(headStyle.topBorderColor())
            .thenReturn(1);
        when(headStyle.verticalAlignment())
            .thenReturn(VerticalAlignment.TOP);
        when(headStyle.wrapped())
            .thenReturn(false);
        StyleProperty result = StyleProperty.build(headStyle);
        assertThat(result.getBorderBottom(), is(BorderStyle.NONE));
        assertThat(result.getBorderLeft(), is(BorderStyle.NONE));
        assertThat(result.getBorderRight(), is(BorderStyle.NONE));
        assertThat(result.getBorderTop(), is(BorderStyle.NONE));
        assertThat(result.getBottomBorderColor(), is((short) 1));
        assertThat(result.getDataFormat(), is((short) 1));
        assertThat(result.getFillBackgroundColor(), is((short) 1));
        assertThat(result.getFillForegroundColor(), is((short) 1));
        assertThat(result.getFillPatternType(), is(FillPatternType.NO_FILL));
        assertThat(result.getHidden(), is(false));
        assertThat(result.getHorizontalAlignment(), is(HorizontalAlignment.GENERAL));
        assertThat(result.getIndent(), is((short) 1));
        assertThat(result.getLeftBorderColor(), is((short) 1));
        assertThat(result.getLocked(), is(false));
        assertThat(result.getQuotePrefix(), is(false));
        assertThat(result.getRightBorderColor(), is((short) 1));
        assertThat(result.getRotation(), is((short) 1));
        assertThat(result.getShrinkToFit(), is(true));
        assertThat(result.getTopBorderColor(), is((short) 1));
        assertThat(result.getVerticalAlignment(), is(VerticalAlignment.TOP));
        assertThat(result.getWrapped(), is(false));
        assertThat(result.getWriteFont(), is(nullValue()));
    }

    @Test
    void build1() {
        ContentStyle contentStyle = mock(ContentStyle.class);
        when(contentStyle.borderBottom())
            .thenReturn(BorderStyle.NONE);
        when(contentStyle.borderLeft())
            .thenReturn(BorderStyle.NONE);
        when(contentStyle.borderRight())
            .thenReturn(BorderStyle.NONE);
        when(contentStyle.borderTop())
            .thenReturn(BorderStyle.NONE);
        when(contentStyle.bottomBorderColor())
            .thenReturn(1);
        when(contentStyle.dataFormat())
            .thenReturn(1);
        when(contentStyle.fillBackgroundColor())
            .thenReturn(1);
        when(contentStyle.fillForegroundColor())
            .thenReturn(1);
        when(contentStyle.fillPatternType())
            .thenReturn(FillPatternType.NO_FILL);
        when(contentStyle.hidden())
            .thenReturn(false);
        when(contentStyle.horizontalAlignment())
            .thenReturn(HorizontalAlignment.GENERAL);
        when(contentStyle.indent())
            .thenReturn(1);
        when(contentStyle.leftBorderColor())
            .thenReturn(1);
        when(contentStyle.locked())
            .thenReturn(false);
        when(contentStyle.quotePrefix())
            .thenReturn(false);
        when(contentStyle.rightBorderColor())
            .thenReturn(1);
        when(contentStyle.rotation())
            .thenReturn(1);
        when(contentStyle.shrinkToFit())
            .thenReturn(true);
        when(contentStyle.topBorderColor())
            .thenReturn(1);
        when(contentStyle.verticalAlignment())
            .thenReturn(VerticalAlignment.TOP);
        when(contentStyle.wrapped())
            .thenReturn(false);
        StyleProperty result = StyleProperty.build(contentStyle);
        assertThat(result.getBorderBottom(), is(BorderStyle.NONE));
        assertThat(result.getBorderLeft(), is(BorderStyle.NONE));
        assertThat(result.getBorderRight(), is(BorderStyle.NONE));
        assertThat(result.getBorderTop(), is(BorderStyle.NONE));
        assertThat(result.getBottomBorderColor(), is((short) 1));
        assertThat(result.getDataFormat(), is((short) 1));
        assertThat(result.getFillBackgroundColor(), is((short) 1));
        assertThat(result.getFillForegroundColor(), is((short) 1));
        assertThat(result.getFillPatternType(), is(FillPatternType.NO_FILL));
        assertThat(result.getHidden(), is(false));
        assertThat(result.getHorizontalAlignment(), is(HorizontalAlignment.GENERAL));
        assertThat(result.getIndent(), is((short) 1));
        assertThat(result.getLeftBorderColor(), is((short) 1));
        assertThat(result.getLocked(), is(false));
        assertThat(result.getQuotePrefix(), is(false));
        assertThat(result.getRightBorderColor(), is((short) 1));
        assertThat(result.getRotation(), is((short) 1));
        assertThat(result.getShrinkToFit(), is(true));
        assertThat(result.getTopBorderColor(), is((short) 1));
        assertThat(result.getVerticalAlignment(), is(VerticalAlignment.TOP));
        assertThat(result.getWrapped(), is(false));
        assertThat(result.getWriteFont(), is(nullValue()));
    }

    @Test
    void build3() {
        assertThat(StyleProperty.build((ContentStyle) null), is(nullValue()));
        assertThat(StyleProperty.build((HeadStyle) null), is(nullValue()));
    }
}
