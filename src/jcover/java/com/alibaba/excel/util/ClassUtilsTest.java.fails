package com.alibaba.excel.util;

import static org.mockito.Mockito.mock;

import com.alibaba.excel.metadata.Holder;
import com.alibaba.excel.write.metadata.holder.WriteHolder;

import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

/**
 * Unit tests for com.alibaba.excel.util.ClassUtils
 *
 * @author Diffblue Cover
 */

class ClassUtilsTest {

    @Test
    void declaredFields4() {

        // arrange
        HashMap<Integer, Field> indexFiledMap = new HashMap<Integer, Field>();
        HashMap<String, Field> ignoreMap = new HashMap<String, Field>();
        Holder holder = mock(Holder.class);

        // act
        ClassUtils.declaredFields(String.class, new HashMap<Integer, Field>(), indexFiledMap, ignoreMap, false, true, holder);

        // assert
        Mockito.verify(indexFiledMap).putAll(Mockito.<Map<? extends Integer, ? extends Field>>any());
        Mockito.verify(ignoreMap).putAll(Mockito.<Map<? extends String, ? extends Field>>any());
    }

    @Test
    void declaredFields1() {

        // arrange
        HashMap<Integer, Field> sortedAllFiledMap =
             new HashMap<Integer, Field>();
        WriteHolder writeHolder = mock(WriteHolder.class);

        // act
        ClassUtils.declaredFields(String.class, sortedAllFiledMap, false, false, writeHolder);

        // assert
        Mockito.verify(sortedAllFiledMap).putAll(Mockito.<Map<? extends Integer, ? extends Field>>any());
    }

    @Test
    void declaredFields2() {

        // arrange
        HashMap<Integer, Field> sortedAllFiledMap =
             new HashMap<Integer, Field>();
        WriteHolder writeHolder = mock(WriteHolder.class);

        // act
        ClassUtils.declaredFields(com.alibaba.excel.metadata.BaseRowModel.class, sortedAllFiledMap, false, false, writeHolder);

        // assert
        Mockito.verify(sortedAllFiledMap).putAll(Mockito.<Map<? extends Integer, ? extends Field>>any());
    }

    @Test
    void declaredFields3() {

        // arrange
        HashMap<Integer, Field> sortedAllFiledMap =
             new HashMap<Integer, Field>();
        WriteHolder writeHolder = mock(WriteHolder.class);

        // act
        ClassUtils.declaredFields(String.class, sortedAllFiledMap, true, false, writeHolder);

        // assert
        Mockito.verify(sortedAllFiledMap).putAll(Mockito.<Map<? extends Integer, ? extends Field>>any());
    }

    @Test
    void declaredFieldsClazzIsNullAndConvertAllFiledIsTrueAndNeedIgnoreIsFalse() {
        WriteHolder writeHolder = mock(WriteHolder.class);
        ClassUtils.declaredFields(null, new HashMap<Integer, Field>(), true, false, writeHolder);
    }

    @Test
    void declaredFieldsClazzIsStringAndConvertAllFiledIsFalseAndNeedIgnoreIsTrue() {
        WriteHolder writeHolder = mock(WriteHolder.class);
        ClassUtils.declaredFields(String.class, new HashMap<Integer, Field>(), false, true, writeHolder);
    }
}
